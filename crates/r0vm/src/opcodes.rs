#[derive(Debug, Copy, Clone)]
#[repr(u8, C)]
pub enum Op {
    Nop,
    Push(u64),
    Pop,
    PopN(u32),
    Dup,
    LocA(u32),
    GlobA(u32),
    Load8,
    Load16,
    Load32,
    Load64,
    Store8,
    Store16,
    Store32,
    Store64,
    Alloc,
    Free,
    StackAlloc(u32),
    AddI,
    SubI,
    MulI,
    DivI,
    AddF,
    SubF,
    MulF,
    DivF,
    DivU,
    Shl,
    Shr,
    And,
    Or,
    Xor,
    Not,
    CmpI,
    CmpU,
    CmpF,
    NegI,
    NegF,
    IToF,
    FToI,
    ShrL,
    BrA(u64),
    Br(i32),
    Bz(i32),
    Bnz(i32),
    Bl(i32),
    Bg(i32),
    Blz(i32),
    Bgz(i32),
    Call(u32),
    Ret,
    ScanI,
    ScanC,
    ScanF,
    PrintI,
    PrintC,
    PrintF,
    PrintS,
    PrintLn,
    Panic,
    Halt,
}

impl Op {
    pub fn code(&self) -> u8 {
        use Op::*;
        // TODO: Add OpCode
        match self {
            Nop => 0x00,
            Push(..) => 0x00,
            Pop => 0x00,
            PopN(..) => 0x00,
            Dup => 0x00,
            LocA(..) => 0x00,
            GlobA(..) => 0x00,
            Load8 => 0x00,
            Load16 => 0x00,
            Load32 => 0x00,
            Load64 => 0x00,
            Store8 => 0x00,
            Store16 => 0x00,
            Store32 => 0x00,
            Store64 => 0x00,
            Alloc => 0x00,
            Free => 0x00,
            StackAlloc(..) => 0x00,
            AddI => 0x00,
            SubI => 0x00,
            MulI => 0x00,
            DivI => 0x00,
            AddF => 0x00,
            SubF => 0x00,
            MulF => 0x00,
            DivF => 0x00,
            DivU => 0x00,
            Shl => 0x00,
            Shr => 0x00,
            And => 0x00,
            Or => 0x00,
            Xor => 0x00,
            Not => 0x00,
            CmpI => 0x00,
            CmpU => 0x00,
            CmpF => 0x00,
            NegI => 0x00,
            NegF => 0x00,
            IToF => 0x00,
            FToI => 0x00,
            ShrL => 0x00,
            BrA(..) => 0x00,
            Br(..) => 0x00,
            Bz(..) => 0x00,
            Bnz(..) => 0x00,
            Bl(..) => 0x00,
            Bg(..) => 0x00,
            Blz(..) => 0x00,
            Bgz(..) => 0x00,
            Call(..) => 0x00,
            Ret => 0x00,
            ScanI => 0x00,
            ScanC => 0x00,
            ScanF => 0x00,
            PrintI => 0x00,
            PrintC => 0x00,
            PrintF => 0x00,
            PrintS => 0x00,
            PrintLn => 0x00,
            Panic => 0x00,
            Halt => 0x00,
        }
    }

    pub fn param_size(code: u8) -> usize {
        match code {
            0x01 => 8,
            0x03 | 0x06 | 0x07 | 0x41..=0x49 => 4,
            _ => 0,
        }
    }

    pub fn from_code(code: u8, param: u64) -> Op {
        unimplemented!("TODO Big match around `code`")
    }
}
